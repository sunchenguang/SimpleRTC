{
  "name": "simpleRTC",
  "tagline": "video chat",
  "body": "## WebRTC Video Chatting in 20 Lines of JS\r\n\r\nWebRTC, so hot right now. If you don't know it, WebRTC is a free, open project that provides simple APIs for creating Real-Time Communications (RTC) for browsers and mobile devices. Essentially, it makes streaming any content such as video, audio, or arbitrary data simple and fast!\r\n\r\n## Why PubNub? Signaling.\r\n\r\nWebRTC is not a standalone API, it needs a signaling service to coordinate communication. Metadata needs to be sent between callers before a connection can be established. \r\n\r\nThis metadata includes things such as:\r\n\r\n- Session control messages to open and close connections\r\n- Error messages\r\n- Codecs/Codec settings, bandwidth and media types\r\n- Keys to establish a secure connection\r\n- Network data such as host IP and port\r\n\r\nOnce signaling has taken place, video/audio/data is streamed directly between clients, using WebRTC's `PeerConnection` API. This peer-to-peer direct connection allows you to stream high-bandwidth robust data, like video.\r\n\r\nPubNub makes this signaling incredibly simple, and then gives you the power to do so much more with your WebRTC applications.\r\n\r\n### Browser Compatibility\r\n\r\nWebRTC is widely adopted by popular browsers such as Chrome and Firefox, but there are many browsers on which certain features will not work. See a list of [supported browsers here](http://iswebrtcreadyyet.com/).\r\n\r\n## Part 1: A Simple WebRTC Video Chat\r\n\r\nTime to begin! First I will show you how to make the bare minimum WebRTC video chat. Then, in Part 2 we will make use of a simple wrapper library to create a full featured video chatting application. The live demo of what you will be making in the next 2.5 minutes [can be found here](http://kevingleason.me/SimpleRTC/minivid.html)!\r\n\r\n### A Note on Testing and Debugging\r\n\r\nIf you try to open `file://<your-webrtc-project>` in your browser, you will likely run into Cross-Origin Resource Sharing (CORS) errors since the browser will block your requests to use video and microphone features. To test your code you have a few options. You can upload your files to a web server, like [Github Pages](https://pages.github.com/) if you prefer. However, to keep development local, I recommend you setup a simple server using Python.\r\n\r\nTo so this, open your terminal and change directories into your current project and depending on your version of Python, run one of the following modules.\r\n\r\n    cd <project-dir>\r\n\r\n    # Python 2\r\n    python -m SimpleHTTPServer <portNo>\r\n    \r\n    # Python 3\r\n    python -m http.server <portNo>\r\n    \r\nFor example, I run Python2.7 and the command I use is `python -m SimpleHTTPServer 8001`. Now I can go to `http://localhost:8001/index.html` to debug my app! Try making an `index.html` with anything in it and serve it on localhost before you continue.\r\n\r\n### Step 1: The HTML5 Backbone\r\n\r\nFor the sake of the demo, let's keep the HTML short and simple. First we need a div to house our videos. Then, all we really need to start off with is a login field so you can specify your name and a call field so you can dial someone.\r\n\r\n    <div id=\"vid-box\"></div>\r\n\r\n    <form name=\"loginForm\" id=\"login\" action=\"#\" onsubmit=\"return login(this);\">\r\n        <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Pick a username!\" />\r\n        <input type=\"submit\" name=\"login_submit\" value=\"Log In\">\r\n    </form>\r\n\r\n\r\n    <form name=\"callForm\" id=\"call\" action=\"#\" onsubmit=\"return makeCall(this);\">\r\n        <input type=\"text\" name=\"number\" placeholder=\"Enter user to dial!\" />\r\n        <input type=\"submit\" value=\"Call\"/>\r\n    </form>\r\n    \r\nThis should leave you with an elaborate, well styled HTML file that looks something like this:\r\n\r\n<img src=\"img/minivid_html.png\" alt=\"minivid_html\">\r\n\r\n### Step 2: The JavaScript Imports\r\n\r\nThere are three libraries that you will need to include to make WebRTC operations much easier. The first thing you should include is [jQuery](https://jquery.com/) to make modifying DOM elements a breeze. Then, you will need the PubNub JavaScript SDK to facilitate the WebRTC signaling. Finally, include the PubNub WebRTC SDK which makes placing phone calls as simple as calling the `dial(number)` function.\r\n\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\r\n    <script src=\"https://cdn.pubnub.com/pubnub.min.js\"></script>\r\n    <script src=\"http://kevingleason.me/SimpleRTC/js/webrtc.js\"></script>\r\n\r\nNow we are ready to write our calling functions for `login` and `makeCall`!\r\n\r\n### Step 3: Preparing to Receive Calls\r\n\r\nIn order to start facilitating video calls, you will need a publish and subscribe key. To get your pub/sub keys, youâ€™ll first need to [sign up for a PubNub account](http://www.pubnub.com/get-started/). Once you sign up, you can find your unique PubNub keys in the [PubNub Developer Dashboard](https://admin.pubnub.com). The free Sandbox tier should give you all the bandwidth you need to build and test your WebRTC Application.\r\n\r\nFirst, lets use jQuery to find our video holder, where other callers faces will go.\r\n\r\n    var video_out = document.getElementById(\"vid-box\");\r\n\r\nNow, to implement the login function. This function will set up the phone using the username they provided as a UUID.\r\n\r\n```\r\nfunction login(form) {\r\n    var phone = window.phone = PHONE({\r\n        number        : form.username.value || \"Anonymous\", // listen on username line else Anonymous\r\n        publish_key   : 'your_pub_key',\r\n        subscribe_key : 'your_sub_key',\r\n    }); \r\n    phone.ready(function(){ form.username.style.background=\"#55ff5b\"; });\r\n    phone.receive(function(session){\r\n        session.connected(function(session) { video_out.appendChild(session.video); });\r\n        session.ended(function(session) { video_out.innerHTML=''; });\r\n    });\r\n    return false;   // So the form does not submit.\r\n}\r\n```\r\n\r\nYou can see we use the username as the phone's number, and instantiate PubNub using your own publish and subscribe keys. The next function `phone.ready` allows you to define a callback for when the phone is ready to place a call. I simply change the username input's background to green, but you can tailor this to your needs.\r\n\r\nThe `phone.receive` function allows you to define a callback that takes a session for when a session (call) event occurs, whether that be a new call, a call hangup, or for losing service, you attach those event handlers to the sessions in `phone.receive`. \r\n\r\nI defined `session.connected` which is called after receiving a call when you are ready to begin talking. I simple appended the session's video element to our video div. \r\n\r\nThen, I define `session.ended` which is called after invoking `phone.handup`. This is where you place end-call logic. I simply clear the video holder's innerHTML.\r\n\r\n### Step 4: Making Calls\r\n\r\nWe now have a phone ready to receive a call, so it is time to create a `makeCall` function.\r\n\r\n```\r\nfunction makeCall(form){\r\n    if (!window.phone) alert(\"Login First!\");\r\n    else phone.dial(form.number.value);\r\n    return false;\r\n}\r\n```\r\n\r\nIf `window.phone` is undefined, we cannot place a call. This will happen if the user did not log in first. If it is, we use the `phone.dial` function which takes a number and an optional list of servers to place a call.\r\n\r\n<img src=\"img/chat.png\" alt=\"Chatting\">\r\n\r\nAnd that is it! You now have a simple WebRTC chatting app, fire up your python server and go test your app on localhost!\r\n\r\n### Want to learn more?\r\n\r\nGood, that never-ending quest for knowledge will get you far in life. Here are some other resources PubNub offers on WebRTC:\r\n\r\n[PubNub WebRTC SDK](https://github.com/stephenlb/webrtc-sdk)\r\n\r\n[What is WebRTC](http://www.pubnub.com/blog/what-is-webrtc/)\r\n\r\n[PubNub WebRTC Demo](http://www.pubnub.com/developers/demos/webrtc/)\r\n\r\nWe will be putting out more information and tricks of using WebRTC in the coming weeks so stay tuned!\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}